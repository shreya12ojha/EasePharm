{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/home/shreya_1203/easepharm/frontend/src/pages/UploadPage.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport ConnectionTest from \"../components/ConnectionTest\";\nimport \"./UploadPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000\";\nconst UploadPageFixed = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [preview, setPreview] = useState(null);\n  const [extractedText, setExtractedText] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [ocrMethod, setOcrMethod] = useState(\"\");\n  const [logs, setLogs] = useState([]);\n  const [debugMode, setDebugMode] = useState(true);\n  const addLog = (message, type = \"info\") => {\n    const timestamp = new Date().toLocaleTimeString();\n    const logEntry = {\n      message,\n      type,\n      timestamp\n    };\n    setLogs(prev => [...prev, logEntry]);\n    console.log(`[${timestamp}] ${message}`);\n  };\n  const handleFileChange = e => {\n    var _e$target$files;\n    const selectedFile = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (selectedFile) {\n      // Validate file\n      if (!selectedFile.type.startsWith(\"image/\")) {\n        addLog(\"❌ Invalid file type. Please select an image file\", \"error\");\n        alert(\"Please select an image file\");\n        return;\n      }\n      if (selectedFile.size > 10 * 1024 * 1024) {\n        addLog(\"❌ File too large. Please select an image smaller than 10MB\", \"error\");\n        alert(\"File too large. Please select an image smaller than 10MB\");\n        return;\n      }\n      setFile(selectedFile);\n      addLog(`📁 File selected: ${selectedFile.name} (${Math.round(selectedFile.size / 1024)}KB)`);\n\n      // Create preview\n      const reader = new FileReader();\n      reader.onload = e => {\n        setPreview(e.target.result);\n        addLog(\"🖼️ Preview created successfully\");\n      };\n      reader.onerror = () => {\n        addLog(\"❌ Failed to create preview\", \"error\");\n      };\n      reader.readAsDataURL(selectedFile);\n    }\n  };\n  const processWithTesseract = async imageData => {\n    try {\n      addLog(\"📦 Loading Tesseract.js...\");\n      const {\n        createWorker\n      } = await import(\"tesseract.js\");\n      setProgress(0);\n      const worker = await createWorker(\"eng\", 1, {\n        logger: m => {\n          if (m.status === \"recognizing text\") {\n            setProgress(Math.round(m.progress * 100));\n            addLog(`🔄 Tesseract progress: ${Math.round(m.progress * 100)}%`);\n          }\n        }\n      });\n      addLog(\"⚙️ Configuring Tesseract for handwriting...\");\n      await worker.setParameters({\n        tessedit_char_whitelist: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,:-/() \",\n        tessedit_pageseg_mode: \"6\"\n      });\n      addLog(\"🔍 Processing image with Tesseract...\");\n      const {\n        data: {\n          text,\n          confidence\n        }\n      } = await worker.recognize(imageData);\n      await worker.terminate();\n      addLog(`✅ Tesseract completed with ${Math.round(confidence)}% confidence`);\n      return {\n        text: text.trim(),\n        confidence\n      };\n    } catch (error) {\n      addLog(`❌ Tesseract error: ${error.message}`, \"error\");\n      throw error;\n    }\n  };\n  const processImage = async () => {\n    if (!file) {\n      addLog(\"❌ No file selected\", \"error\");\n      return;\n    }\n    setIsProcessing(true);\n    setProgress(0);\n    setOcrMethod(\"\");\n    setExtractedText(\"\");\n    setLogs([]);\n    try {\n      addLog(\"🚀 Starting OCR process...\");\n      addLog(`📡 API URL: ${API_BASE_URL}`);\n\n      // Create FormData\n      const formData = new FormData();\n      formData.append(\"image\", file);\n      addLog(\"📦 FormData created with image file\");\n      addLog(\"📤 Sending request to server...\");\n\n      // Add timeout and better error handling\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n\n      const response = await fetch(`${API_BASE_URL}/api/ocr`, {\n        method: \"POST\",\n        body: formData,\n        signal: controller.signal\n        // Don't set Content-Type header - let browser set it with boundary\n      });\n      clearTimeout(timeoutId);\n      addLog(`📨 Server response status: ${response.status} ${response.statusText}`);\n      if (!response.ok) {\n        const errorText = await response.text();\n        addLog(`❌ Server error response: ${errorText}`, \"error\");\n        throw new Error(`Server error: ${response.status} - ${errorText}`);\n      }\n      const data = await response.json();\n      addLog(`📋 Response data received: ${JSON.stringify(data, null, 2)}`);\n      if (data.success) {\n        if (data.text && data.method !== \"client-side\") {\n          // Server-side OCR successful\n          setExtractedText(data.text);\n          setOcrMethod(data.method);\n          addLog(`✅ Text extracted using ${data.method}`);\n          addLog(`📝 Extracted ${data.text.length} characters`);\n        } else {\n          // Use client-side OCR\n          setOcrMethod(\"Tesseract.js (Client-side)\");\n          addLog(\"🔄 Falling back to client-side OCR...\");\n          const imageData = data.imageData || preview;\n          if (!imageData) {\n            throw new Error(\"No image data available for client-side processing\");\n          }\n          const result = await processWithTesseract(imageData);\n          setExtractedText(result.text);\n          addLog(`✅ Text extracted with ${Math.round(result.confidence)}% confidence`);\n          addLog(`📝 Extracted ${result.text.length} characters`);\n        }\n      } else {\n        throw new Error(data.error || \"Unknown server error\");\n      }\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        addLog(\"❌ Request timed out after 30 seconds\", \"error\");\n      } else if (error.message.includes(\"Failed to fetch\")) {\n        addLog(\"❌ Network error - cannot connect to server\", \"error\");\n        addLog(\"💡 Check if backend server is running on port 5000\", \"error\");\n        addLog(\"💡 Check if CORS is properly configured\", \"error\");\n      } else {\n        addLog(`❌ Processing error: ${error.message}`, \"error\");\n      }\n      console.error(\"💥 Full error:\", error);\n    } finally {\n      setIsProcessing(false);\n      setProgress(0);\n    }\n  };\n  const createOrder = async () => {\n    if (!extractedText) {\n      addLog(\"❌ No extracted text to create order\", \"error\");\n      return;\n    }\n    try {\n      addLog(\"📝 Creating order...\");\n      const response = await fetch(`${API_BASE_URL}/api/orders`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prescriptionText: extractedText\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server error: ${response.status} - ${errorText}`);\n      }\n      const data = await response.json();\n      if (data.success) {\n        addLog(`✅ Order created: ${data.orderId}`);\n        alert(`Order #${data.orderId} created successfully!`);\n\n        // Reset form\n        setFile(null);\n        setPreview(null);\n        setExtractedText(\"\");\n        setOcrMethod(\"\");\n      } else {\n        throw new Error(data.error);\n      }\n    } catch (error) {\n      addLog(`❌ Order creation failed: ${error.message}`, \"error\");\n      alert(`Failed to create order: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Upload Prescription - Debug Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ConnectionTest, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"debug-toggle\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: debugMode,\n            onChange: e => setDebugMode(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this), \"Show Debug Logs\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"\\uD83D\\uDCE4 Upload Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-drop-zone\",\n            children: preview ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"preview-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: preview || \"/placeholder.svg\",\n                alt: \"Preview\",\n                className: \"preview-image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"file-info\",\n                children: [\"\\uD83D\\uDCC1 \", file === null || file === void 0 ? void 0 : file.name, \" (\", Math.round(((file === null || file === void 0 ? void 0 : file.size) || 0) / 1024), \"KB)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"drop-placeholder\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"drop-icon\",\n                children: \"\\uD83D\\uDCF7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Select an image file\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"file-hint\",\n                children: \"Max size: 10MB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"image/*\",\n            onChange: handleFileChange,\n            disabled: isProcessing,\n            className: \"file-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-info\",\n              children: [\"Processing with \", ocrMethod, progress > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\" - \", progress, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 36\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 17\n            }, this), progress > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress-fill\",\n                style: {\n                  width: `${progress}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: processImage,\n            disabled: !file || isProcessing,\n            className: \"btn btn-primary\",\n            children: isProcessing ? \"⏳ Extracting Text...\" : \"🔍 Extract Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this), ocrMethod && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ocr-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u2705 Processed using: \", ocrMethod]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 17\n            }, this), extractedText && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\uD83D\\uDCDD \", extractedText.length, \" characters extracted\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"\\uD83D\\uDCDD Extracted Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"Extracted text will appear here...\",\n            value: extractedText,\n            onChange: e => setExtractedText(e.target.value),\n            rows: 15,\n            className: \"text-area\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: createOrder,\n              disabled: !extractedText,\n              className: \"btn btn-success\",\n              children: \"\\u2705 Create Order\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                setExtractedText(\"\");\n                setLogs([]);\n              },\n              disabled: !extractedText,\n              className: \"btn btn-secondary\",\n              children: \"\\uD83D\\uDDD1\\uFE0F Clear\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), debugMode && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"debug-logs\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83D\\uDD0D Debug Logs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logs-container\",\n          children: logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `log-entry ${log.type}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"timestamp\",\n              children: [\"[\", log.timestamp, \"]\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message\",\n              children: log.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadPageFixed, \"58jVl3QB9Q83sU8E8kO7UlQ/cFE=\");\n_c = UploadPageFixed;\nexport default UploadPageFixed;\nvar _c;\n$RefreshReg$(_c, \"UploadPageFixed\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","ConnectionTest","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","UploadPageFixed","file","setFile","preview","setPreview","extractedText","setExtractedText","isProcessing","setIsProcessing","progress","setProgress","ocrMethod","setOcrMethod","logs","setLogs","debugMode","setDebugMode","addLog","message","type","timestamp","Date","toLocaleTimeString","logEntry","prev","console","log","handleFileChange","e","_e$target$files","selectedFile","target","files","startsWith","alert","size","name","Math","round","reader","FileReader","onload","result","onerror","readAsDataURL","processWithTesseract","imageData","createWorker","worker","logger","m","status","setParameters","tessedit_char_whitelist","tessedit_pageseg_mode","data","text","confidence","recognize","terminate","trim","error","processImage","formData","FormData","append","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","body","signal","clearTimeout","statusText","ok","errorText","Error","json","JSON","stringify","success","length","includes","createOrder","headers","prescriptionText","orderId","className","children","fileName","lineNumber","columnNumber","checked","onChange","src","alt","accept","disabled","style","width","onClick","placeholder","value","rows","map","index","_c","$RefreshReg$"],"sources":["/home/shreya_1203/easepharm/frontend/src/pages/UploadPage.js"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport ConnectionTest from \"../components/ConnectionTest\";\nimport \"./UploadPage.css\";\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000\";\n\nconst UploadPageFixed = () => {\n  const [file, setFile] = useState(null);\n  const [preview, setPreview] = useState(null);\n  const [extractedText, setExtractedText] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [ocrMethod, setOcrMethod] = useState(\"\");\n  const [logs, setLogs] = useState([]);\n  const [debugMode, setDebugMode] = useState(true);\n\n  const addLog = (message, type = \"info\") => {\n    const timestamp = new Date().toLocaleTimeString();\n    const logEntry = {\n      message,\n      type,\n      timestamp,\n    };\n    setLogs((prev) => [...prev, logEntry]);\n    console.log(`[${timestamp}] ${message}`);\n  };\n\n  const handleFileChange = (e) => {\n    const selectedFile = e.target.files?.[0];\n    if (selectedFile) {\n      // Validate file\n      if (!selectedFile.type.startsWith(\"image/\")) {\n        addLog(\"❌ Invalid file type. Please select an image file\", \"error\");\n        alert(\"Please select an image file\");\n        return;\n      }\n\n      if (selectedFile.size > 10 * 1024 * 1024) {\n        addLog(\n          \"❌ File too large. Please select an image smaller than 10MB\",\n          \"error\"\n        );\n        alert(\"File too large. Please select an image smaller than 10MB\");\n        return;\n      }\n\n      setFile(selectedFile);\n      addLog(\n        `📁 File selected: ${selectedFile.name} (${Math.round(\n          selectedFile.size / 1024\n        )}KB)`\n      );\n\n      // Create preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setPreview(e.target.result);\n        addLog(\"🖼️ Preview created successfully\");\n      };\n      reader.onerror = () => {\n        addLog(\"❌ Failed to create preview\", \"error\");\n      };\n      reader.readAsDataURL(selectedFile);\n    }\n  };\n\n  const processWithTesseract = async (imageData) => {\n    try {\n      addLog(\"📦 Loading Tesseract.js...\");\n      const { createWorker } = await import(\"tesseract.js\");\n\n      setProgress(0);\n      const worker = await createWorker(\"eng\", 1, {\n        logger: (m) => {\n          if (m.status === \"recognizing text\") {\n            setProgress(Math.round(m.progress * 100));\n            addLog(`🔄 Tesseract progress: ${Math.round(m.progress * 100)}%`);\n          }\n        },\n      });\n\n      addLog(\"⚙️ Configuring Tesseract for handwriting...\");\n      await worker.setParameters({\n        tessedit_char_whitelist:\n          \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,:-/() \",\n        tessedit_pageseg_mode: \"6\",\n      });\n\n      addLog(\"🔍 Processing image with Tesseract...\");\n      const {\n        data: { text, confidence },\n      } = await worker.recognize(imageData);\n      await worker.terminate();\n\n      addLog(\n        `✅ Tesseract completed with ${Math.round(confidence)}% confidence`\n      );\n      return { text: text.trim(), confidence };\n    } catch (error) {\n      addLog(`❌ Tesseract error: ${error.message}`, \"error\");\n      throw error;\n    }\n  };\n\n  const processImage = async () => {\n    if (!file) {\n      addLog(\"❌ No file selected\", \"error\");\n      return;\n    }\n\n    setIsProcessing(true);\n    setProgress(0);\n    setOcrMethod(\"\");\n    setExtractedText(\"\");\n    setLogs([]);\n\n    try {\n      addLog(\"🚀 Starting OCR process...\");\n      addLog(`📡 API URL: ${API_BASE_URL}`);\n\n      // Create FormData\n      const formData = new FormData();\n      formData.append(\"image\", file);\n      addLog(\"📦 FormData created with image file\");\n\n      addLog(\"📤 Sending request to server...\");\n\n      // Add timeout and better error handling\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout\n\n      const response = await fetch(`${API_BASE_URL}/api/ocr`, {\n        method: \"POST\",\n        body: formData,\n        signal: controller.signal,\n        // Don't set Content-Type header - let browser set it with boundary\n      });\n\n      clearTimeout(timeoutId);\n\n      addLog(\n        `📨 Server response status: ${response.status} ${response.statusText}`\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        addLog(`❌ Server error response: ${errorText}`, \"error\");\n        throw new Error(`Server error: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      addLog(`📋 Response data received: ${JSON.stringify(data, null, 2)}`);\n\n      if (data.success) {\n        if (data.text && data.method !== \"client-side\") {\n          // Server-side OCR successful\n          setExtractedText(data.text);\n          setOcrMethod(data.method);\n          addLog(`✅ Text extracted using ${data.method}`);\n          addLog(`📝 Extracted ${data.text.length} characters`);\n        } else {\n          // Use client-side OCR\n          setOcrMethod(\"Tesseract.js (Client-side)\");\n          addLog(\"🔄 Falling back to client-side OCR...\");\n\n          const imageData = data.imageData || preview;\n          if (!imageData) {\n            throw new Error(\n              \"No image data available for client-side processing\"\n            );\n          }\n\n          const result = await processWithTesseract(imageData);\n          setExtractedText(result.text);\n\n          addLog(\n            `✅ Text extracted with ${Math.round(\n              result.confidence\n            )}% confidence`\n          );\n          addLog(`📝 Extracted ${result.text.length} characters`);\n        }\n      } else {\n        throw new Error(data.error || \"Unknown server error\");\n      }\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        addLog(\"❌ Request timed out after 30 seconds\", \"error\");\n      } else if (error.message.includes(\"Failed to fetch\")) {\n        addLog(\"❌ Network error - cannot connect to server\", \"error\");\n        addLog(\"💡 Check if backend server is running on port 5000\", \"error\");\n        addLog(\"💡 Check if CORS is properly configured\", \"error\");\n      } else {\n        addLog(`❌ Processing error: ${error.message}`, \"error\");\n      }\n      console.error(\"💥 Full error:\", error);\n    } finally {\n      setIsProcessing(false);\n      setProgress(0);\n    }\n  };\n\n  const createOrder = async () => {\n    if (!extractedText) {\n      addLog(\"❌ No extracted text to create order\", \"error\");\n      return;\n    }\n\n    try {\n      addLog(\"📝 Creating order...\");\n\n      const response = await fetch(`${API_BASE_URL}/api/orders`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ prescriptionText: extractedText }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server error: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n\n      if (data.success) {\n        addLog(`✅ Order created: ${data.orderId}`);\n        alert(`Order #${data.orderId} created successfully!`);\n\n        // Reset form\n        setFile(null);\n        setPreview(null);\n        setExtractedText(\"\");\n        setOcrMethod(\"\");\n      } else {\n        throw new Error(data.error);\n      }\n    } catch (error) {\n      addLog(`❌ Order creation failed: ${error.message}`, \"error\");\n      alert(`Failed to create order: ${error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"upload-page\">\n      <div className=\"container\">\n        <h1>Upload Prescription - Debug Mode</h1>\n\n        {/* Connection Test */}\n        <ConnectionTest />\n\n        {/* Debug Toggle */}\n        <div className=\"debug-toggle\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={debugMode}\n              onChange={(e) => setDebugMode(e.target.checked)}\n            />\n            Show Debug Logs\n          </label>\n        </div>\n\n        <div className=\"upload-grid\">\n          {/* Upload Section */}\n          <div className=\"upload-section\">\n            <h2>📤 Upload Image</h2>\n\n            <div className=\"file-drop-zone\">\n              {preview ? (\n                <div className=\"preview-container\">\n                  <img\n                    src={preview || \"/placeholder.svg\"}\n                    alt=\"Preview\"\n                    className=\"preview-image\"\n                  />\n                  <div className=\"file-info\">\n                    📁 {file?.name} ({Math.round((file?.size || 0) / 1024)}KB)\n                  </div>\n                </div>\n              ) : (\n                <div className=\"drop-placeholder\">\n                  <div className=\"drop-icon\">📷</div>\n                  <p>Select an image file</p>\n                  <p className=\"file-hint\">Max size: 10MB</p>\n                </div>\n              )}\n            </div>\n\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleFileChange}\n              disabled={isProcessing}\n              className=\"file-input\"\n            />\n\n            {isProcessing && (\n              <div className=\"progress-container\">\n                <div className=\"progress-info\">\n                  Processing with {ocrMethod}\n                  {progress > 0 && <span> - {progress}%</span>}\n                </div>\n                {progress > 0 && (\n                  <div className=\"progress-bar\">\n                    <div\n                      className=\"progress-fill\"\n                      style={{ width: `${progress}%` }}\n                    ></div>\n                  </div>\n                )}\n              </div>\n            )}\n\n            <button\n              onClick={processImage}\n              disabled={!file || isProcessing}\n              className=\"btn btn-primary\"\n            >\n              {isProcessing ? \"⏳ Extracting Text...\" : \"🔍 Extract Text\"}\n            </button>\n\n            {ocrMethod && (\n              <div className=\"ocr-info\">\n                <p>✅ Processed using: {ocrMethod}</p>\n                {extractedText && (\n                  <p>📝 {extractedText.length} characters extracted</p>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Text Section */}\n          <div className=\"text-section\">\n            <h2>📝 Extracted Text</h2>\n\n            <textarea\n              placeholder=\"Extracted text will appear here...\"\n              value={extractedText}\n              onChange={(e) => setExtractedText(e.target.value)}\n              rows={15}\n              className=\"text-area\"\n            />\n\n            <div className=\"button-group\">\n              <button\n                onClick={createOrder}\n                disabled={!extractedText}\n                className=\"btn btn-success\"\n              >\n                ✅ Create Order\n              </button>\n              <button\n                onClick={() => {\n                  setExtractedText(\"\");\n                  setLogs([]);\n                }}\n                disabled={!extractedText}\n                className=\"btn btn-secondary\"\n              >\n                🗑️ Clear\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Debug Logs */}\n        {debugMode && (\n          <div className=\"debug-logs\">\n            <h3>🔍 Debug Logs</h3>\n            <div className=\"logs-container\">\n              {logs.map((log, index) => (\n                <div key={index} className={`log-entry ${log.type}`}>\n                  <span className=\"timestamp\">[{log.timestamp}]</span>\n                  <span className=\"message\">{log.message}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default UploadPageFixed;\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,YAAA;EAAAC,EAAA,GAAAC,YAAA;AAEb,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAV,EAAA;EAC5B,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACqB,IAAI,EAAEC,OAAO,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACuB,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMyB,MAAM,GAAGA,CAACC,OAAO,EAAEC,IAAI,GAAG,MAAM,KAAK;IACzC,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;IACjD,MAAMC,QAAQ,GAAG;MACfL,OAAO;MACPC,IAAI;MACJC;IACF,CAAC;IACDN,OAAO,CAAEU,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAED,QAAQ,CAAC,CAAC;IACtCE,OAAO,CAACC,GAAG,CAAC,IAAIN,SAAS,KAAKF,OAAO,EAAE,CAAC;EAC1C,CAAC;EAED,MAAMS,gBAAgB,GAAIC,CAAC,IAAK;IAAA,IAAAC,eAAA;IAC9B,MAAMC,YAAY,IAAAD,eAAA,GAAGD,CAAC,CAACG,MAAM,CAACC,KAAK,cAAAH,eAAA,uBAAdA,eAAA,CAAiB,CAAC,CAAC;IACxC,IAAIC,YAAY,EAAE;MAChB;MACA,IAAI,CAACA,YAAY,CAACX,IAAI,CAACc,UAAU,CAAC,QAAQ,CAAC,EAAE;QAC3ChB,MAAM,CAAC,kDAAkD,EAAE,OAAO,CAAC;QACnEiB,KAAK,CAAC,6BAA6B,CAAC;QACpC;MACF;MAEA,IAAIJ,YAAY,CAACK,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE;QACxClB,MAAM,CACJ,4DAA4D,EAC5D,OACF,CAAC;QACDiB,KAAK,CAAC,0DAA0D,CAAC;QACjE;MACF;MAEAhC,OAAO,CAAC4B,YAAY,CAAC;MACrBb,MAAM,CACJ,qBAAqBa,YAAY,CAACM,IAAI,KAAKC,IAAI,CAACC,KAAK,CACnDR,YAAY,CAACK,IAAI,GAAG,IACtB,CAAC,KACH,CAAC;;MAED;MACA,MAAMI,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAIb,CAAC,IAAK;QACrBxB,UAAU,CAACwB,CAAC,CAACG,MAAM,CAACW,MAAM,CAAC;QAC3BzB,MAAM,CAAC,kCAAkC,CAAC;MAC5C,CAAC;MACDsB,MAAM,CAACI,OAAO,GAAG,MAAM;QACrB1B,MAAM,CAAC,4BAA4B,EAAE,OAAO,CAAC;MAC/C,CAAC;MACDsB,MAAM,CAACK,aAAa,CAACd,YAAY,CAAC;IACpC;EACF,CAAC;EAED,MAAMe,oBAAoB,GAAG,MAAOC,SAAS,IAAK;IAChD,IAAI;MACF7B,MAAM,CAAC,4BAA4B,CAAC;MACpC,MAAM;QAAE8B;MAAa,CAAC,GAAG,MAAM,MAAM,CAAC,cAAc,CAAC;MAErDrC,WAAW,CAAC,CAAC,CAAC;MACd,MAAMsC,MAAM,GAAG,MAAMD,YAAY,CAAC,KAAK,EAAE,CAAC,EAAE;QAC1CE,MAAM,EAAGC,CAAC,IAAK;UACb,IAAIA,CAAC,CAACC,MAAM,KAAK,kBAAkB,EAAE;YACnCzC,WAAW,CAAC2B,IAAI,CAACC,KAAK,CAACY,CAAC,CAACzC,QAAQ,GAAG,GAAG,CAAC,CAAC;YACzCQ,MAAM,CAAC,0BAA0BoB,IAAI,CAACC,KAAK,CAACY,CAAC,CAACzC,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAC;UACnE;QACF;MACF,CAAC,CAAC;MAEFQ,MAAM,CAAC,6CAA6C,CAAC;MACrD,MAAM+B,MAAM,CAACI,aAAa,CAAC;QACzBC,uBAAuB,EACrB,wEAAwE;QAC1EC,qBAAqB,EAAE;MACzB,CAAC,CAAC;MAEFrC,MAAM,CAAC,uCAAuC,CAAC;MAC/C,MAAM;QACJsC,IAAI,EAAE;UAAEC,IAAI;UAAEC;QAAW;MAC3B,CAAC,GAAG,MAAMT,MAAM,CAACU,SAAS,CAACZ,SAAS,CAAC;MACrC,MAAME,MAAM,CAACW,SAAS,CAAC,CAAC;MAExB1C,MAAM,CACJ,8BAA8BoB,IAAI,CAACC,KAAK,CAACmB,UAAU,CAAC,cACtD,CAAC;MACD,OAAO;QAAED,IAAI,EAAEA,IAAI,CAACI,IAAI,CAAC,CAAC;QAAEH;MAAW,CAAC;IAC1C,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd5C,MAAM,CAAC,sBAAsB4C,KAAK,CAAC3C,OAAO,EAAE,EAAE,OAAO,CAAC;MACtD,MAAM2C,KAAK;IACb;EACF,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAAC7D,IAAI,EAAE;MACTgB,MAAM,CAAC,oBAAoB,EAAE,OAAO,CAAC;MACrC;IACF;IAEAT,eAAe,CAAC,IAAI,CAAC;IACrBE,WAAW,CAAC,CAAC,CAAC;IACdE,YAAY,CAAC,EAAE,CAAC;IAChBN,gBAAgB,CAAC,EAAE,CAAC;IACpBQ,OAAO,CAAC,EAAE,CAAC;IAEX,IAAI;MACFG,MAAM,CAAC,4BAA4B,CAAC;MACpCA,MAAM,CAAC,eAAerB,YAAY,EAAE,CAAC;;MAErC;MACA,MAAMmE,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEhE,IAAI,CAAC;MAC9BgB,MAAM,CAAC,qCAAqC,CAAC;MAE7CA,MAAM,CAAC,iCAAiC,CAAC;;MAEzC;MACA,MAAMiD,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;MACxC,MAAMC,SAAS,GAAGC,UAAU,CAAC,MAAMH,UAAU,CAACI,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;MAE/D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG5E,YAAY,UAAU,EAAE;QACtD6E,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEX,QAAQ;QACdY,MAAM,EAAET,UAAU,CAACS;QACnB;MACF,CAAC,CAAC;MAEFC,YAAY,CAACR,SAAS,CAAC;MAEvBnD,MAAM,CACJ,8BAA8BsD,QAAQ,CAACpB,MAAM,IAAIoB,QAAQ,CAACM,UAAU,EACtE,CAAC;MAED,IAAI,CAACN,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACf,IAAI,CAAC,CAAC;QACvCvC,MAAM,CAAC,4BAA4B8D,SAAS,EAAE,EAAE,OAAO,CAAC;QACxD,MAAM,IAAIC,KAAK,CAAC,iBAAiBT,QAAQ,CAACpB,MAAM,MAAM4B,SAAS,EAAE,CAAC;MACpE;MAEA,MAAMxB,IAAI,GAAG,MAAMgB,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClChE,MAAM,CAAC,8BAA8BiE,IAAI,CAACC,SAAS,CAAC5B,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;MAErE,IAAIA,IAAI,CAAC6B,OAAO,EAAE;QAChB,IAAI7B,IAAI,CAACC,IAAI,IAAID,IAAI,CAACkB,MAAM,KAAK,aAAa,EAAE;UAC9C;UACAnE,gBAAgB,CAACiD,IAAI,CAACC,IAAI,CAAC;UAC3B5C,YAAY,CAAC2C,IAAI,CAACkB,MAAM,CAAC;UACzBxD,MAAM,CAAC,0BAA0BsC,IAAI,CAACkB,MAAM,EAAE,CAAC;UAC/CxD,MAAM,CAAC,gBAAgBsC,IAAI,CAACC,IAAI,CAAC6B,MAAM,aAAa,CAAC;QACvD,CAAC,MAAM;UACL;UACAzE,YAAY,CAAC,4BAA4B,CAAC;UAC1CK,MAAM,CAAC,uCAAuC,CAAC;UAE/C,MAAM6B,SAAS,GAAGS,IAAI,CAACT,SAAS,IAAI3C,OAAO;UAC3C,IAAI,CAAC2C,SAAS,EAAE;YACd,MAAM,IAAIkC,KAAK,CACb,oDACF,CAAC;UACH;UAEA,MAAMtC,MAAM,GAAG,MAAMG,oBAAoB,CAACC,SAAS,CAAC;UACpDxC,gBAAgB,CAACoC,MAAM,CAACc,IAAI,CAAC;UAE7BvC,MAAM,CACJ,yBAAyBoB,IAAI,CAACC,KAAK,CACjCI,MAAM,CAACe,UACT,CAAC,cACH,CAAC;UACDxC,MAAM,CAAC,gBAAgByB,MAAM,CAACc,IAAI,CAAC6B,MAAM,aAAa,CAAC;QACzD;MACF,CAAC,MAAM;QACL,MAAM,IAAIL,KAAK,CAACzB,IAAI,CAACM,KAAK,IAAI,sBAAsB,CAAC;MACvD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd,IAAIA,KAAK,CAACzB,IAAI,KAAK,YAAY,EAAE;QAC/BnB,MAAM,CAAC,sCAAsC,EAAE,OAAO,CAAC;MACzD,CAAC,MAAM,IAAI4C,KAAK,CAAC3C,OAAO,CAACoE,QAAQ,CAAC,iBAAiB,CAAC,EAAE;QACpDrE,MAAM,CAAC,4CAA4C,EAAE,OAAO,CAAC;QAC7DA,MAAM,CAAC,oDAAoD,EAAE,OAAO,CAAC;QACrEA,MAAM,CAAC,yCAAyC,EAAE,OAAO,CAAC;MAC5D,CAAC,MAAM;QACLA,MAAM,CAAC,uBAAuB4C,KAAK,CAAC3C,OAAO,EAAE,EAAE,OAAO,CAAC;MACzD;MACAO,OAAO,CAACoC,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACxC,CAAC,SAAS;MACRrD,eAAe,CAAC,KAAK,CAAC;MACtBE,WAAW,CAAC,CAAC,CAAC;IAChB;EACF,CAAC;EAED,MAAM6E,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAAClF,aAAa,EAAE;MAClBY,MAAM,CAAC,qCAAqC,EAAE,OAAO,CAAC;MACtD;IACF;IAEA,IAAI;MACFA,MAAM,CAAC,sBAAsB,CAAC;MAE9B,MAAMsD,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG5E,YAAY,aAAa,EAAE;QACzD6E,MAAM,EAAE,MAAM;QACde,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDd,IAAI,EAAEQ,IAAI,CAACC,SAAS,CAAC;UAAEM,gBAAgB,EAAEpF;QAAc,CAAC;MAC1D,CAAC,CAAC;MAEF,IAAI,CAACkE,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACf,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIwB,KAAK,CAAC,iBAAiBT,QAAQ,CAACpB,MAAM,MAAM4B,SAAS,EAAE,CAAC;MACpE;MAEA,MAAMxB,IAAI,GAAG,MAAMgB,QAAQ,CAACU,IAAI,CAAC,CAAC;MAElC,IAAI1B,IAAI,CAAC6B,OAAO,EAAE;QAChBnE,MAAM,CAAC,oBAAoBsC,IAAI,CAACmC,OAAO,EAAE,CAAC;QAC1CxD,KAAK,CAAC,UAAUqB,IAAI,CAACmC,OAAO,wBAAwB,CAAC;;QAErD;QACAxF,OAAO,CAAC,IAAI,CAAC;QACbE,UAAU,CAAC,IAAI,CAAC;QAChBE,gBAAgB,CAAC,EAAE,CAAC;QACpBM,YAAY,CAAC,EAAE,CAAC;MAClB,CAAC,MAAM;QACL,MAAM,IAAIoE,KAAK,CAACzB,IAAI,CAACM,KAAK,CAAC;MAC7B;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd5C,MAAM,CAAC,4BAA4B4C,KAAK,CAAC3C,OAAO,EAAE,EAAE,OAAO,CAAC;MAC5DgB,KAAK,CAAC,2BAA2B2B,KAAK,CAAC3C,OAAO,EAAE,CAAC;IACnD;EACF,CAAC;EAED,oBACEvB,OAAA;IAAKgG,SAAS,EAAC,aAAa;IAAAC,QAAA,eAC1BjG,OAAA;MAAKgG,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBjG,OAAA;QAAAiG,QAAA,EAAI;MAAgC;QAAAC,QAAA,EAAAxG,YAAA;QAAAyG,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAGzCpG,OAAA,CAACF,cAAc;QAAAoG,QAAA,EAAAxG,YAAA;QAAAyG,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAGlBpG,OAAA;QAAKgG,SAAS,EAAC,cAAc;QAAAC,QAAA,eAC3BjG,OAAA;UAAAiG,QAAA,gBACEjG,OAAA;YACEwB,IAAI,EAAC,UAAU;YACf6E,OAAO,EAAEjF,SAAU;YACnBkF,QAAQ,EAAGrE,CAAC,IAAKZ,YAAY,CAACY,CAAC,CAACG,MAAM,CAACiE,OAAO;UAAE;YAAAH,QAAA,EAAAxG,YAAA;YAAAyG,UAAA;YAAAC,YAAA;UAAA,OACjD,CAAC,mBAEJ;QAAA;UAAAF,QAAA,EAAAxG,YAAA;UAAAyG,UAAA;UAAAC,YAAA;QAAA,OAAO;MAAC;QAAAF,QAAA,EAAAxG,YAAA;QAAAyG,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eAENpG,OAAA;QAAKgG,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAE1BjG,OAAA;UAAKgG,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7BjG,OAAA;YAAAiG,QAAA,EAAI;UAAe;YAAAC,QAAA,EAAAxG,YAAA;YAAAyG,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAExBpG,OAAA;YAAKgG,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAC5BzF,OAAO,gBACNR,OAAA;cAAKgG,SAAS,EAAC,mBAAmB;cAAAC,QAAA,gBAChCjG,OAAA;gBACEuG,GAAG,EAAE/F,OAAO,IAAI,kBAAmB;gBACnCgG,GAAG,EAAC,SAAS;gBACbR,SAAS,EAAC;cAAe;gBAAAE,QAAA,EAAAxG,YAAA;gBAAAyG,UAAA;gBAAAC,YAAA;cAAA,OAC1B,CAAC,eACFpG,OAAA;gBAAKgG,SAAS,EAAC,WAAW;gBAAAC,QAAA,GAAC,eACtB,EAAC3F,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEmC,IAAI,EAAC,IAAE,EAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAArC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEkC,IAAI,KAAI,CAAC,IAAI,IAAI,CAAC,EAAC,KACzD;cAAA;gBAAA0D,QAAA,EAAAxG,YAAA;gBAAAyG,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA;cAAAF,QAAA,EAAAxG,YAAA;cAAAyG,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,gBAENpG,OAAA;cAAKgG,SAAS,EAAC,kBAAkB;cAAAC,QAAA,gBAC/BjG,OAAA;gBAAKgG,SAAS,EAAC,WAAW;gBAAAC,QAAA,EAAC;cAAE;gBAAAC,QAAA,EAAAxG,YAAA;gBAAAyG,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACnCpG,OAAA;gBAAAiG,QAAA,EAAG;cAAoB;gBAAAC,QAAA,EAAAxG,YAAA;gBAAAyG,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,eAC3BpG,OAAA;gBAAGgG,SAAS,EAAC,WAAW;gBAAAC,QAAA,EAAC;cAAc;gBAAAC,QAAA,EAAAxG,YAAA;gBAAAyG,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC;YAAA;cAAAF,QAAA,EAAAxG,YAAA;cAAAyG,UAAA;cAAAC,YAAA;YAAA,OACxC;UACN;YAAAF,QAAA,EAAAxG,YAAA;YAAAyG,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eAENpG,OAAA;YACEwB,IAAI,EAAC,MAAM;YACXiF,MAAM,EAAC,SAAS;YAChBH,QAAQ,EAAEtE,gBAAiB;YAC3B0E,QAAQ,EAAE9F,YAAa;YACvBoF,SAAS,EAAC;UAAY;YAAAE,QAAA,EAAAxG,YAAA;YAAAyG,UAAA;YAAAC,YAAA;UAAA,OACvB,CAAC,EAEDxF,YAAY,iBACXZ,OAAA;YAAKgG,SAAS,EAAC,oBAAoB;YAAAC,QAAA,gBACjCjG,OAAA;cAAKgG,SAAS,EAAC,eAAe;cAAAC,QAAA,GAAC,kBACb,EAACjF,SAAS,EACzBF,QAAQ,GAAG,CAAC,iBAAId,OAAA;gBAAAiG,QAAA,GAAM,KAAG,EAACnF,QAAQ,EAAC,GAAC;cAAA;gBAAAoF,QAAA,EAAAxG,YAAA;gBAAAyG,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAF,QAAA,EAAAxG,YAAA;cAAAyG,UAAA;cAAAC,YAAA;YAAA,OACzC,CAAC,EACLtF,QAAQ,GAAG,CAAC,iBACXd,OAAA;cAAKgG,SAAS,EAAC,cAAc;cAAAC,QAAA,eAC3BjG,OAAA;gBACEgG,SAAS,EAAC,eAAe;gBACzBW,KAAK,EAAE;kBAAEC,KAAK,EAAE,GAAG9F,QAAQ;gBAAI;cAAE;gBAAAoF,QAAA,EAAAxG,YAAA;gBAAAyG,UAAA;gBAAAC,YAAA;cAAA,OAC7B;YAAC;cAAAF,QAAA,EAAAxG,YAAA;cAAAyG,UAAA;cAAAC,YAAA;YAAA,OACJ,CACN;UAAA;YAAAF,QAAA,EAAAxG,YAAA;YAAAyG,UAAA;YAAAC,YAAA;UAAA,OACE,CACN,eAEDpG,OAAA;YACE6G,OAAO,EAAE1C,YAAa;YACtBuC,QAAQ,EAAE,CAACpG,IAAI,IAAIM,YAAa;YAChCoF,SAAS,EAAC,iBAAiB;YAAAC,QAAA,EAE1BrF,YAAY,GAAG,sBAAsB,GAAG;UAAiB;YAAAsF,QAAA,EAAAxG,YAAA;YAAAyG,UAAA;YAAAC,YAAA;UAAA,OACpD,CAAC,EAERpF,SAAS,iBACRhB,OAAA;YAAKgG,SAAS,EAAC,UAAU;YAAAC,QAAA,gBACvBjG,OAAA;cAAAiG,QAAA,GAAG,0BAAmB,EAACjF,SAAS;YAAA;cAAAkF,QAAA,EAAAxG,YAAA;cAAAyG,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,EACpC1F,aAAa,iBACZV,OAAA;cAAAiG,QAAA,GAAG,eAAG,EAACvF,aAAa,CAACgF,MAAM,EAAC,uBAAqB;YAAA;cAAAQ,QAAA,EAAAxG,YAAA;cAAAyG,UAAA;cAAAC,YAAA;YAAA,OAAG,CACrD;UAAA;YAAAF,QAAA,EAAAxG,YAAA;YAAAyG,UAAA;YAAAC,YAAA;UAAA,OACE,CACN;QAAA;UAAAF,QAAA,EAAAxG,YAAA;UAAAyG,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,eAGNpG,OAAA;UAAKgG,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3BjG,OAAA;YAAAiG,QAAA,EAAI;UAAiB;YAAAC,QAAA,EAAAxG,YAAA;YAAAyG,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAE1BpG,OAAA;YACE8G,WAAW,EAAC,oCAAoC;YAChDC,KAAK,EAAErG,aAAc;YACrB4F,QAAQ,EAAGrE,CAAC,IAAKtB,gBAAgB,CAACsB,CAAC,CAACG,MAAM,CAAC2E,KAAK,CAAE;YAClDC,IAAI,EAAE,EAAG;YACThB,SAAS,EAAC;UAAW;YAAAE,QAAA,EAAAxG,YAAA;YAAAyG,UAAA;YAAAC,YAAA;UAAA,OACtB,CAAC,eAEFpG,OAAA;YAAKgG,SAAS,EAAC,cAAc;YAAAC,QAAA,gBAC3BjG,OAAA;cACE6G,OAAO,EAAEjB,WAAY;cACrBc,QAAQ,EAAE,CAAChG,aAAc;cACzBsF,SAAS,EAAC,iBAAiB;cAAAC,QAAA,EAC5B;YAED;cAAAC,QAAA,EAAAxG,YAAA;cAAAyG,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACTpG,OAAA;cACE6G,OAAO,EAAEA,CAAA,KAAM;gBACblG,gBAAgB,CAAC,EAAE,CAAC;gBACpBQ,OAAO,CAAC,EAAE,CAAC;cACb,CAAE;cACFuF,QAAQ,EAAE,CAAChG,aAAc;cACzBsF,SAAS,EAAC,mBAAmB;cAAAC,QAAA,EAC9B;YAED;cAAAC,QAAA,EAAAxG,YAAA;cAAAyG,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAF,QAAA,EAAAxG,YAAA;YAAAyG,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC;QAAA;UAAAF,QAAA,EAAAxG,YAAA;UAAAyG,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAF,QAAA,EAAAxG,YAAA;QAAAyG,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EAGLhF,SAAS,iBACRpB,OAAA;QAAKgG,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBjG,OAAA;UAAAiG,QAAA,EAAI;QAAa;UAAAC,QAAA,EAAAxG,YAAA;UAAAyG,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtBpG,OAAA;UAAKgG,SAAS,EAAC,gBAAgB;UAAAC,QAAA,EAC5B/E,IAAI,CAAC+F,GAAG,CAAC,CAAClF,GAAG,EAAEmF,KAAK,kBACnBlH,OAAA;YAAiBgG,SAAS,EAAE,aAAajE,GAAG,CAACP,IAAI,EAAG;YAAAyE,QAAA,gBAClDjG,OAAA;cAAMgG,SAAS,EAAC,WAAW;cAAAC,QAAA,GAAC,GAAC,EAAClE,GAAG,CAACN,SAAS,EAAC,GAAC;YAAA;cAAAyE,QAAA,EAAAxG,YAAA;cAAAyG,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACpDpG,OAAA;cAAMgG,SAAS,EAAC,SAAS;cAAAC,QAAA,EAAElE,GAAG,CAACR;YAAO;cAAA2E,QAAA,EAAAxG,YAAA;cAAAyG,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA,GAFtCc,KAAK;YAAAhB,QAAA,EAAAxG,YAAA;YAAAyG,UAAA;YAAAC,YAAA;UAAA,OAGV,CACN;QAAC;UAAAF,QAAA,EAAAxG,YAAA;UAAAyG,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAF,QAAA,EAAAxG,YAAA;QAAAyG,UAAA;QAAAC,YAAA;MAAA,OACH,CACN;IAAA;MAAAF,QAAA,EAAAxG,YAAA;MAAAyG,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAF,QAAA,EAAAxG,YAAA;IAAAyG,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzG,EAAA,CA1XIU,eAAe;AAAA8G,EAAA,GAAf9G,eAAe;AA4XrB,eAAeA,eAAe;AAAC,IAAA8G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}