{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/home/shreya_1203/easepharm/frontend/src/pages/UploadPage.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./UploadPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000\";\nconst UploadPage = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [preview, setPreview] = useState(null);\n  const [extractedText, setExtractedText] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [ocrMethod, setOcrMethod] = useState(\"\");\n  const [logs, setLogs] = useState([]);\n  const addLog = message => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLogs(prev => [...prev, `[${timestamp}] ${message}`]);\n    console.log(message);\n  };\n  const handleFileChange = e => {\n    var _e$target$files;\n    const selectedFile = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (selectedFile) {\n      // Validate file\n      if (!selectedFile.type.startsWith(\"image/\")) {\n        alert(\"Please select an image file\");\n        return;\n      }\n      if (selectedFile.size > 10 * 1024 * 1024) {\n        alert(\"File too large. Please select an image smaller than 10MB\");\n        return;\n      }\n      setFile(selectedFile);\n      addLog(`File selected: ${selectedFile.name} (${Math.round(selectedFile.size / 1024)}KB)`);\n\n      // Create preview\n      const reader = new FileReader();\n      reader.onload = e => setPreview(e.target.result);\n      reader.readAsDataURL(selectedFile);\n    }\n  };\n  const processWithTesseract = async imageData => {\n    try {\n      addLog(\"Loading Tesseract.js...\");\n      const {\n        createWorker\n      } = await import(\"tesseract.js\");\n      setProgress(0);\n      const worker = await createWorker(\"eng\", 1, {\n        logger: m => {\n          if (m.status === \"recognizing text\") {\n            setProgress(Math.round(m.progress * 100));\n          }\n        }\n      });\n      addLog(\"Configuring Tesseract for handwriting...\");\n      await worker.setParameters({\n        tessedit_char_whitelist: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,:-/() \",\n        tessedit_pageseg_mode: \"6\"\n      });\n      addLog(\"Processing image with Tesseract...\");\n      const {\n        data: {\n          text,\n          confidence\n        }\n      } = await worker.recognize(imageData);\n      await worker.terminate();\n      return {\n        text: text.trim(),\n        confidence\n      };\n    } catch (error) {\n      addLog(`Tesseract error: ${error.message}`);\n      throw error;\n    }\n  };\n  const processImage = async () => {\n    if (!file) return;\n    setIsProcessing(true);\n    setProgress(0);\n    setOcrMethod(\"\");\n    setExtractedText(\"\");\n    setLogs([]);\n    try {\n      addLog(\"Starting OCR process...\");\n\n      // First try server-side OCR\n      const formData = new FormData();\n      formData.append(\"image\", file);\n      addLog(\"Sending image to server...\");\n      const response = await fetch(`${API_BASE_URL}/api/ocr`, {\n        method: \"POST\",\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`Server error: ${response.status}`);\n      }\n      const data = await response.json();\n      addLog(`Server response: ${data.success ? \"Success\" : \"Failed\"}`);\n      if (data.success) {\n        if (data.text && data.method !== \"client-side\") {\n          // Server-side OCR successful\n          setExtractedText(data.text);\n          setOcrMethod(data.method);\n          addLog(`✅ Text extracted using ${data.method}`);\n          addLog(`📝 Extracted ${data.text.length} characters`);\n        } else {\n          // Use client-side OCR\n          setOcrMethod(\"Tesseract.js (Client-side)\");\n          addLog(\"🔄 Using client-side OCR...\");\n          const imageData = data.imageData || preview;\n          const result = await processWithTesseract(imageData);\n          setExtractedText(result.text);\n          addLog(`✅ Text extracted with ${Math.round(result.confidence)}% confidence`);\n          addLog(`📝 Extracted ${result.text.length} characters`);\n        }\n      } else {\n        throw new Error(data.error || \"Failed to process image\");\n      }\n    } catch (error) {\n      addLog(`❌ Error: ${error.message}`);\n      alert(`Error: ${error.message}`);\n    } finally {\n      setIsProcessing(false);\n      setProgress(0);\n    }\n  };\n  const createOrder = async () => {\n    if (!extractedText) return;\n    try {\n      addLog(\"Creating order...\");\n      const response = await fetch(`${API_BASE_URL}/api/orders`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prescriptionText: extractedText\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        addLog(`✅ Order created: ${data.orderId}`);\n        alert(`Order #${data.orderId} created successfully!`);\n\n        // Reset form\n        setFile(null);\n        setPreview(null);\n        setExtractedText(\"\");\n        setOcrMethod(\"\");\n      } else {\n        throw new Error(data.error);\n      }\n    } catch (error) {\n      addLog(`❌ Order creation failed: ${error.message}`);\n      alert(`Failed to create order: ${error.message}`);\n    }\n  };\n  const testConnection = async () => {\n    try {\n      addLog(\"Testing server connection...\");\n      const response = await fetch(`${API_BASE_URL}/api/health`);\n      const data = await response.json();\n      addLog(`✅ Server connected: ${data.message}`);\n    } catch (error) {\n      addLog(`❌ Server connection failed: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Upload Prescription\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"debug-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83D\\uDD27 Debug Panel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: testConnection,\n          className: \"btn btn-secondary\",\n          children: \"Test Server Connection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logs\",\n          children: logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"log-entry\",\n            children: log\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"\\uD83D\\uDCE4 Upload Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-drop-zone\",\n            children: preview ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"preview-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: preview || \"/placeholder.svg\",\n                alt: \"Preview\",\n                className: \"preview-image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"file-info\",\n                children: [\"\\uD83D\\uDCC1 \", file === null || file === void 0 ? void 0 : file.name, \" (\", Math.round(((file === null || file === void 0 ? void 0 : file.size) || 0) / 1024), \"KB)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"drop-placeholder\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"drop-icon\",\n                children: \"\\uD83D\\uDCF7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Select an image file\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"file-hint\",\n                children: \"Max size: 10MB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"image/*\",\n            onChange: handleFileChange,\n            disabled: isProcessing,\n            className: \"file-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-info\",\n              children: [\"Processing with \", ocrMethod, progress > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\" - \", progress, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 36\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this), progress > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress-fill\",\n                style: {\n                  width: `${progress}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: processImage,\n            disabled: !file || isProcessing,\n            className: \"btn btn-primary\",\n            children: isProcessing ? \"⏳ Extracting Text...\" : \"🔍 Extract Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this), ocrMethod && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ocr-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u2705 Processed using: \", ocrMethod]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 17\n            }, this), extractedText && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\uD83D\\uDCDD \", extractedText.length, \" characters extracted\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 35\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"\\uD83D\\uDCDD Extracted Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"Extracted text will appear here...\",\n            value: extractedText,\n            onChange: e => setExtractedText(e.target.value),\n            rows: 15,\n            className: \"text-area\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: createOrder,\n              disabled: !extractedText,\n              className: \"btn btn-success\",\n              children: \"\\u2705 Create Order\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setExtractedText(\"\"),\n              disabled: !extractedText,\n              className: \"btn btn-secondary\",\n              children: \"\\uD83D\\uDDD1\\uFE0F Clear\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadPage, \"YE4UwR97+ZcHdj038c/WcAn1wIM=\");\n_c = UploadPage;\nexport default UploadPage;\nvar _c;\n$RefreshReg$(_c, \"UploadPage\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","UploadPage","file","setFile","preview","setPreview","extractedText","setExtractedText","isProcessing","setIsProcessing","progress","setProgress","ocrMethod","setOcrMethod","logs","setLogs","addLog","message","timestamp","Date","toLocaleTimeString","prev","console","log","handleFileChange","e","_e$target$files","selectedFile","target","files","type","startsWith","alert","size","name","Math","round","reader","FileReader","onload","result","readAsDataURL","processWithTesseract","imageData","createWorker","worker","logger","m","status","setParameters","tessedit_char_whitelist","tessedit_pageseg_mode","data","text","confidence","recognize","terminate","trim","error","processImage","formData","FormData","append","response","fetch","method","body","ok","Error","json","success","length","createOrder","headers","JSON","stringify","prescriptionText","orderId","testConnection","className","children","fileName","lineNumber","columnNumber","onClick","map","index","src","alt","accept","onChange","disabled","style","width","placeholder","value","rows","_c","$RefreshReg$"],"sources":["/home/shreya_1203/easepharm/frontend/src/pages/UploadPage.js"],"sourcesContent":["\"use client\"\n\nimport { useState } from \"react\"\nimport \"./UploadPage.css\"\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000\"\n\nconst UploadPage = () => {\n  const [file, setFile] = useState(null)\n  const [preview, setPreview] = useState(null)\n  const [extractedText, setExtractedText] = useState(\"\")\n  const [isProcessing, setIsProcessing] = useState(false)\n  const [progress, setProgress] = useState(0)\n  const [ocrMethod, setOcrMethod] = useState(\"\")\n  const [logs, setLogs] = useState([])\n\n  const addLog = (message) => {\n    const timestamp = new Date().toLocaleTimeString()\n    setLogs((prev) => [...prev, `[${timestamp}] ${message}`])\n    console.log(message)\n  }\n\n  const handleFileChange = (e) => {\n    const selectedFile = e.target.files?.[0]\n    if (selectedFile) {\n      // Validate file\n      if (!selectedFile.type.startsWith(\"image/\")) {\n        alert(\"Please select an image file\")\n        return\n      }\n\n      if (selectedFile.size > 10 * 1024 * 1024) {\n        alert(\"File too large. Please select an image smaller than 10MB\")\n        return\n      }\n\n      setFile(selectedFile)\n      addLog(`File selected: ${selectedFile.name} (${Math.round(selectedFile.size / 1024)}KB)`)\n\n      // Create preview\n      const reader = new FileReader()\n      reader.onload = (e) => setPreview(e.target.result)\n      reader.readAsDataURL(selectedFile)\n    }\n  }\n\n  const processWithTesseract = async (imageData) => {\n    try {\n      addLog(\"Loading Tesseract.js...\")\n      const { createWorker } = await import(\"tesseract.js\")\n\n      setProgress(0)\n      const worker = await createWorker(\"eng\", 1, {\n        logger: (m) => {\n          if (m.status === \"recognizing text\") {\n            setProgress(Math.round(m.progress * 100))\n          }\n        },\n      })\n\n      addLog(\"Configuring Tesseract for handwriting...\")\n      await worker.setParameters({\n        tessedit_char_whitelist: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,:-/() \",\n        tessedit_pageseg_mode: \"6\",\n      })\n\n      addLog(\"Processing image with Tesseract...\")\n      const {\n        data: { text, confidence },\n      } = await worker.recognize(imageData)\n      await worker.terminate()\n\n      return { text: text.trim(), confidence }\n    } catch (error) {\n      addLog(`Tesseract error: ${error.message}`)\n      throw error\n    }\n  }\n\n  const processImage = async () => {\n    if (!file) return\n\n    setIsProcessing(true)\n    setProgress(0)\n    setOcrMethod(\"\")\n    setExtractedText(\"\")\n    setLogs([])\n\n    try {\n      addLog(\"Starting OCR process...\")\n\n      // First try server-side OCR\n      const formData = new FormData()\n      formData.append(\"image\", file)\n\n      addLog(\"Sending image to server...\")\n      const response = await fetch(`${API_BASE_URL}/api/ocr`, {\n        method: \"POST\",\n        body: formData,\n      })\n\n      if (!response.ok) {\n        throw new Error(`Server error: ${response.status}`)\n      }\n\n      const data = await response.json()\n      addLog(`Server response: ${data.success ? \"Success\" : \"Failed\"}`)\n\n      if (data.success) {\n        if (data.text && data.method !== \"client-side\") {\n          // Server-side OCR successful\n          setExtractedText(data.text)\n          setOcrMethod(data.method)\n          addLog(`✅ Text extracted using ${data.method}`)\n          addLog(`📝 Extracted ${data.text.length} characters`)\n        } else {\n          // Use client-side OCR\n          setOcrMethod(\"Tesseract.js (Client-side)\")\n          addLog(\"🔄 Using client-side OCR...\")\n\n          const imageData = data.imageData || preview\n          const result = await processWithTesseract(imageData)\n          setExtractedText(result.text)\n\n          addLog(`✅ Text extracted with ${Math.round(result.confidence)}% confidence`)\n          addLog(`📝 Extracted ${result.text.length} characters`)\n        }\n      } else {\n        throw new Error(data.error || \"Failed to process image\")\n      }\n    } catch (error) {\n      addLog(`❌ Error: ${error.message}`)\n      alert(`Error: ${error.message}`)\n    } finally {\n      setIsProcessing(false)\n      setProgress(0)\n    }\n  }\n\n  const createOrder = async () => {\n    if (!extractedText) return\n\n    try {\n      addLog(\"Creating order...\")\n      const response = await fetch(`${API_BASE_URL}/api/orders`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ prescriptionText: extractedText }),\n      })\n\n      const data = await response.json()\n\n      if (data.success) {\n        addLog(`✅ Order created: ${data.orderId}`)\n        alert(`Order #${data.orderId} created successfully!`)\n\n        // Reset form\n        setFile(null)\n        setPreview(null)\n        setExtractedText(\"\")\n        setOcrMethod(\"\")\n      } else {\n        throw new Error(data.error)\n      }\n    } catch (error) {\n      addLog(`❌ Order creation failed: ${error.message}`)\n      alert(`Failed to create order: ${error.message}`)\n    }\n  }\n\n  const testConnection = async () => {\n    try {\n      addLog(\"Testing server connection...\")\n      const response = await fetch(`${API_BASE_URL}/api/health`)\n      const data = await response.json()\n      addLog(`✅ Server connected: ${data.message}`)\n    } catch (error) {\n      addLog(`❌ Server connection failed: ${error.message}`)\n    }\n  }\n\n  return (\n    <div className=\"upload-page\">\n      <div className=\"container\">\n        <h1>Upload Prescription</h1>\n\n        {/* Debug Panel */}\n        <div className=\"debug-panel\">\n          <h3>🔧 Debug Panel</h3>\n          <button onClick={testConnection} className=\"btn btn-secondary\">\n            Test Server Connection\n          </button>\n          <div className=\"logs\">\n            {logs.map((log, index) => (\n              <div key={index} className=\"log-entry\">\n                {log}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"upload-grid\">\n          {/* Upload Section */}\n          <div className=\"upload-section\">\n            <h2>📤 Upload Image</h2>\n\n            <div className=\"file-drop-zone\">\n              {preview ? (\n                <div className=\"preview-container\">\n                  <img src={preview || \"/placeholder.svg\"} alt=\"Preview\" className=\"preview-image\" />\n                  <div className=\"file-info\">\n                    📁 {file?.name} ({Math.round((file?.size || 0) / 1024)}KB)\n                  </div>\n                </div>\n              ) : (\n                <div className=\"drop-placeholder\">\n                  <div className=\"drop-icon\">📷</div>\n                  <p>Select an image file</p>\n                  <p className=\"file-hint\">Max size: 10MB</p>\n                </div>\n              )}\n            </div>\n\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleFileChange}\n              disabled={isProcessing}\n              className=\"file-input\"\n            />\n\n            {isProcessing && (\n              <div className=\"progress-container\">\n                <div className=\"progress-info\">\n                  Processing with {ocrMethod}\n                  {progress > 0 && <span> - {progress}%</span>}\n                </div>\n                {progress > 0 && (\n                  <div className=\"progress-bar\">\n                    <div className=\"progress-fill\" style={{ width: `${progress}%` }}></div>\n                  </div>\n                )}\n              </div>\n            )}\n\n            <button onClick={processImage} disabled={!file || isProcessing} className=\"btn btn-primary\">\n              {isProcessing ? \"⏳ Extracting Text...\" : \"🔍 Extract Text\"}\n            </button>\n\n            {ocrMethod && (\n              <div className=\"ocr-info\">\n                <p>✅ Processed using: {ocrMethod}</p>\n                {extractedText && <p>📝 {extractedText.length} characters extracted</p>}\n              </div>\n            )}\n          </div>\n\n          {/* Text Section */}\n          <div className=\"text-section\">\n            <h2>📝 Extracted Text</h2>\n\n            <textarea\n              placeholder=\"Extracted text will appear here...\"\n              value={extractedText}\n              onChange={(e) => setExtractedText(e.target.value)}\n              rows={15}\n              className=\"text-area\"\n            />\n\n            <div className=\"button-group\">\n              <button onClick={createOrder} disabled={!extractedText} className=\"btn btn-success\">\n                ✅ Create Order\n              </button>\n              <button onClick={() => setExtractedText(\"\")} disabled={!extractedText} className=\"btn btn-secondary\">\n                🗑️ Clear\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default UploadPage\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}